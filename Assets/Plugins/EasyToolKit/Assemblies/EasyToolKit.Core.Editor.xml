<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyToolKit.Core.Editor</name>
    </assembly>
    <members>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.PushGUIEnabled(System.Boolean)">
            <summary>
            Pushes a state to the GUI enabled stack. Remember to pop the state with <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.PopGUIEnabled"/>.
            </summary>
            <param name="enabled">If set to <c>true</c> GUI will be enabled. Otherwise GUI will be disabled.</param>
        </member>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.PopGUIEnabled">
            <summary>
            Pops the GUI enabled pushed by <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.PushGUIEnabled(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.BeginIgnoreInput">
            <summary>
            Ignores input on following GUI calls. Remember to end with <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.EndIgnoreInput"/>.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.EndIgnoreInput">
            <summary>
            Ends the ignore input started by <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.BeginIgnoreInput"/>.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.PushEventType(UnityEngine.EventType)">
            <summary>
            Pushes the event type to the stack. Remember to pop with <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.PopEventType"/>.
            </summary>
            <param name="eventType">The type of event to push.</param>
        </member>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.PopEventType">
            <summary>
            Pops the event type pushed by <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.PopEventType"/>.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.PushHierarchyMode(System.Boolean,System.Boolean)">
            <summary>
            Pushes the hierarchy mode to the stack. Remember to pop the state with <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.PopHierarchyMode"/>.
            </summary>
            <param name="hierarchyMode">The hierachy mode state to push.</param>
            <param name="preserveCurrentLabelWidth">Changing hierachy mode also changes how label-widths are calcualted. By default, we try to keep the current label width.</param>
        </member>
        <member name="M:EasyToolKit.Core.Editor.EasyGUIHelper.PopHierarchyMode">
            <summary>
            Pops the hierarchy mode pushed by <see cref="M:EasyToolKit.Core.Editor.EasyGUIHelper.PushHierarchyMode(System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:EasyToolKit.Core.Editor.GUIFrameCounter">
            <summary>
            A utility class for properly counting frames and helps determine when a frame has started in an editor window.
            </summary>
        </member>
        <member name="P:EasyToolKit.Core.Editor.GUIFrameCounter.FrameCount">
            <summary>
            Gets the frame count.
            </summary>
        </member>
        <member name="P:EasyToolKit.Core.Editor.GUIFrameCounter.IsNewFrame">
            <summary>
            Gets a value indicating whether this instance is new frame.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.GUIFrameCounter.Update">
            <summary>
            Updates the frame counter and returns itself.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.AssemblyUtility.GetAllAssemblies">
            <summary>
            Gets an <see cref="T:Sirenix.Utilities.ImmutableList" /> of all assemblies in the current <see cref="T:System.AppDomain" />.
            </summary>
            <returns>An <see cref="T:Sirenix.Utilities.ImmutableList" /> of all assemblies in the current <see cref="T:System.AppDomain" />.</returns>
        </member>
        <member name="M:EasyToolKit.Core.Editor.AssemblyUtility.IsDependentOn(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>
            Determines whether an assembly is depended on another assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="otherAssembly">The other assembly.</param>
            <returns>
              <c>true</c> if <paramref name="assembly" /> has a reference in <paramref name="otherAssembly" /> or <paramref name="assembly" /> is the same as <paramref name="otherAssembly" />.
            </returns>
            <exception cref="T:System.NullReferenceException"><paramref name="assembly" /> is null.</exception>
            <exception cref="T:System.NullReferenceException"><paramref name="otherAssembly" /> is null.</exception>
        </member>
        <member name="M:EasyToolKit.Core.Editor.AssemblyUtility.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determines whether the assembly module is a of type <see cref="T:System.Reflection.Emit.ModuleBuilder" />.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
              <c>true</c> if the specified assembly of type <see cref="T:System.Reflection.Emit.ModuleBuilder" />; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
        </member>
        <member name="M:EasyToolKit.Core.Editor.AssemblyUtility.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
            Gets the full file path to a given assembly's containing directory.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The full file path to a given assembly's containing directory, or <c>Null</c> if no file path was found.</returns>
            <exception cref="T:System.NullReferenceException"><paramref name="assembly" /> is Null.</exception>
        </member>
        <member name="M:EasyToolKit.Core.Editor.AssemblyUtility.GetAssemblyFilePath(System.Reflection.Assembly)">
            <summary>Gets the full directory path to a given assembly.</summary>
            <param name="assembly">The assembly.</param>
            <returns>The full directory path in which a given assembly is located, or <c>Null</c> if no file path was found.</returns>
        </member>
        <member name="M:EasyToolKit.Core.Editor.AssemblyUtility.GetTypeByFullName(System.String)">
            <summary>Gets the type.</summary>
            <param name="fullName">The full name of the type, with or without any assembly information.</param>
        </member>
        <member name="M:EasyToolKit.Core.Editor.AssemblyUtility.GetTypes(EasyToolKit.Core.Editor.AssemblyCategory)">
            <summary>
            Get types from the current AppDomain with a specified <see cref="T:Sirenix.Utilities.AssemblyCategory" /> filter.
            </summary>
            <param name="assemblyFlags">The <see cref="T:Sirenix.Utilities.AssemblyCategory" /> filters.</param>
            <returns>Types from the current AppDomain with the specified <see cref="T:Sirenix.Utilities.AssemblyCategory" /> filters.</returns>
        </member>
        <member name="T:EasyToolKit.Core.Editor.UnityEditorEventUtility">
            <summary>
            This class contains utility methods for subscribing to various UnityEditor events reliably and safely across all Odin-supported versions of Unity.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.UnityEditorEventUtility.DelayActionThreadSafe(System.Action)">
            <summary>
            Sometimes, someone accidentally overrides a delay action subscription to <see cref="F:UnityEditor.EditorApplication.delayCall" />
            by setting the value instead of using the += operator as should be done,
            which can be done because in many versions of Unity it is a field, and not an event.
            (In some versions of Unity it is an event, though, and in this case, this method acts as a wrapper
            to subscribe reliably, no matter the nature of the backing event.)
            This method subscribes to a lot of different callbacks, in the hopes of catching at least one.
            <para />
            As opposed to <see cref="M:Sirenix.OdinInspector.Editor.UnityEditorEventUtility.DelayAction(System.Action)" />, this method is safe to call from any thread, and will
            delay the actual subscription to a safe time.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.UnityEditorEventUtility.DelayAction(System.Action)">
            <summary>
            Sometimes, an idiot overrides a delay action subscription to <see cref="F:UnityEditor.EditorApplication.delayCall" />,
            which can be done because the people at Unity didn't know what events were once upon a time.
            This method subscribes to a lot of different callbacks, in the hopes of catching at least one.
            </summary>
        </member>
        <member name="M:EasyToolKit.Core.Editor.UnityEditorEventUtility.DelayAction(System.Action,System.Boolean)">
            <summary>
            Sometimes, an idiot overrides a delay action subscription to <see cref="F:UnityEditor.EditorApplication.delayCall" />,
            which can be done because the people at Unity didn't know what events were once upon a time.
            This method subscribes to a lot of different callbacks, in the hopes of catching at least one.
            </summary>
        </member>
        <member name="E:EasyToolKit.Core.Editor.UnityEditorEventUtility.DuringSceneGUI">
            <summary>
            In 2019.1+, this event subscribes to SceneView.duringSceneGui. In 2018.4 and lower, it subscribes to SceneView.onSceneGUIDelegate.
            </summary>
        </member>
        <member name="E:EasyToolKit.Core.Editor.UnityEditorEventUtility.EditorApplication_delayCall">
            <summary>
            In 2020.1, Unity changed EditorApplication.delayCall from a field to an event, meaning
            we now have to use reflection to access it consistently across all versions of Unity.
            </summary>
        </member>
    </members>
</doc>
