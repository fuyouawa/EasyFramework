<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyFramework.ToolKit</name>
    </assembly>
    <members>
        <member name="T:EasyFramework.ToolKit.InfoBoxExAttribute">
            <summary>
            扩展自Sirenix.OdinInspector.InfoBoxAttribute
            优化中文字体的显示
            使用方法和Sirenix.OdinInspector.InfoBoxAttribute一样
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.InfoBoxExAttribute.Message">
            <summary>
            The message to display in the info box.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.InfoBoxExAttribute.InfoMessageType">
            <summary>
            The type of the message box.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.InfoBoxExAttribute.VisibleIf">
            <summary>
            Optional member field, property or function to show and hide the info box.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.InfoBoxExAttribute.GUIAlwaysEnabled">
            <summary>
            When <c>true</c> the InfoBox will ignore the GUI.enable flag and always draw as enabled.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.InfoBoxExAttribute.IconColor">
            <summary>Supports a variety of color formats, including named colors (e.g. "red", "orange", "green", "blue"), hex codes (e.g. "#FF0000" and "#FF0000FF"), and RGBA (e.g. "RGBA(1,1,1,1)") or RGB (e.g. "RGB(1,1,1)"), including Odin attribute expressions (e.g "@this.MyColor"). Here are the available named colors: black, blue, clear, cyan, gray, green, grey, magenta, orange, purple, red, transparent, transparentBlack, transparentWhite, white, yellow, lightblue, lightcyan, lightgray, lightgreen, lightgrey, lightmagenta, lightorange, lightpurple, lightred, lightyellow, darkblue, darkcyan, darkgray, darkgreen, darkgrey, darkmagenta, darkorange, darkpurple, darkred, darkyellow.</summary>
        </member>
        <member name="P:EasyFramework.ToolKit.InfoBoxExAttribute.Icon">
            <summary>
            The icon to be displayed next to the message.
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.InfoBoxExAttribute.#ctor(System.String,Sirenix.OdinInspector.InfoMessageType,System.String)">
            <summary>
            Displays an info box above the property.
            </summary>
            <param name="message">The message for the message box. Supports referencing a member string field, property or method by using $.</param>
            <param name="infoMessageType">The type of the message box.</param>
            <param name="visibleIfMemberName">Name of member bool to show or hide the message box.</param>
        </member>
        <member name="M:EasyFramework.ToolKit.InfoBoxExAttribute.#ctor(System.String,System.String)">
            <summary>
            Displays an info box above the property.
            </summary>
            <param name="message">The message for the message box. Supports referencing a member string field, property or method by using $.</param>
            <param name="visibleIfMemberName">Name of member bool to show or hide the message box.</param>
        </member>
        <member name="M:EasyFramework.ToolKit.InfoBoxExAttribute.#ctor(System.String,Sirenix.OdinInspector.SdfIconType,System.String)">
            <summary>
            Displays an info box above the property.
            </summary>
            <param name="message">The message for the message box. Supports referencing a member string field, property or method by using $.</param>
            <param name="icon">The icon to be displayed next to the message.</param>
            <param name="visibleIfMemberName">Name of member bool to show or hide the message box.</param>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleExAttribute.Title">
            <summary>
            The title displayed above the property in the inspector.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleExAttribute.Subtitle">
            <summary>
            Optional subtitle.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleExAttribute.BoldTitle">
            <summary>
            If <c>true</c> the title will be displayed with a bold font.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleExAttribute.HorizontalLine">
            <summary>
            Gets a value indicating whether or not to draw a horizontal line below the title.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleExAttribute.TitleAlignment">
            <summary>
            Title alignment.
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.TitleExAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a title above any property in the inspector.
            </summary>
            <param name="title">The title displayed above the property in the inspector.</param>
            <param name="subtitle">Optional subtitle</param>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleGroupExAttribute.Subtitle">
            <summary>
            Optional subtitle.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleGroupExAttribute.TitleAlignment">
            <summary>
            Title alignment.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleGroupExAttribute.HorizontalLine">
            <summary>
            Gets a value indicating whether or not to draw a horizontal line below the title.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleGroupExAttribute.BoldTitle">
            <summary>
            If <c>true</c> the title will be displayed with a bold font.
            </summary>
        </member>
        <member name="F:EasyFramework.ToolKit.TitleGroupExAttribute.Indent">
            <summary>
            Gets a value indicating whether or not to indent all group members.
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.TitleGroupExAttribute.#ctor(System.String,System.String,System.Single)">
            <summary>
            Groups properties vertically together with a title, an optional subtitle, and an optional horizontal line. 
            </summary>
            <param name="title">The title-</param>
            <param name="subtitle">Optional subtitle.</param>
            <param name="order">The group order.</param>
        </member>
        <member name="M:EasyFramework.ToolKit.TitleGroupExAttribute.CombineValuesWith(Sirenix.OdinInspector.PropertyGroupAttribute)">
            <summary>
            Combines TitleGroup attributes.
            </summary>
            <param name="other">The other group attribute to combine with.</param>
        </member>
        <member name="T:EasyFramework.ToolKit.GameObjectPoolManager">
            <summary>
            游戏对象池管理器，负责创建和管理多个游戏对象池
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.GameObjectPoolManager.PoolType">
            <summary>
            游戏对象池类型，用于创建游戏对象池实例
            </summary>
            <exception cref="T:System.InvalidOperationException">当要设置的value为null、是抽象或者接口、没有继承自<see cref="T:EasyFramework.ToolKit.IGameObjectPool"/>时抛出</exception>
        </member>
        <member name="M:EasyFramework.ToolKit.GameObjectPoolManager.TryCreatePool(System.String,System.Type,UnityEngine.GameObject)">
            <summary>
            尝试创建游戏对象池
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <param name="original">原始预制体</param>
            <returns></returns>
        </member>
        <member name="M:EasyFramework.ToolKit.GameObjectPoolManager.TryGetPool(System.String,System.Type)">
            <summary>
            尝试获取指定名称和类型的游戏对象池
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EasyFramework.ToolKit.GameObjectPoolManager.CreateUnityObjectPool(System.String,System.Type,UnityEngine.GameObject)">
            <summary>
            创建新的游戏对象池实例
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <param name="original">原始预制体</param>
            <returns></returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IGameObjectPoolManager.TryCreatePool(System.String,System.Type,UnityEngine.GameObject)">
            <summary>
            尝试创建对象池。
            </summary>
            <param name="poolName"></param>
            <param name="objectType"></param>
            <param name="original"></param>
            <returns> true 表示创建成功；false 表示已存在同名同类型的池。</returns>
        </member>
        <member name="T:EasyFramework.ToolKit.IObjectPoolManager">
            <summary>
            对象池管理器接口，负责管理多个对象池的创建和访问
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolManager.TryCreatePool(System.String,System.Type)">
            <summary>
            尝试创建对象池
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <returns>true 表示创建成功；false 表示已存在同名同类型的池</returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolManager.TryGetPool(System.String,System.Type)">
            <summary>
            尝试获取指定名称和类型的对象池
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <returns>找到的对象池，如果不存在则返回null</returns>
        </member>
        <member name="T:EasyFramework.ToolKit.ObjectPoolManager">
            <summary>
            对象池管理器，负责创建和管理多个对象池
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.ObjectPoolManager.PoolType">
            <summary>
            对象池类型，用于创建对象池实例
            </summary>
            <exception cref="T:System.InvalidOperationException">
            当value为null、是抽象类或接口、没有继承自IObjectPool时抛出
            </exception>
        </member>
        <member name="M:EasyFramework.ToolKit.ObjectPoolManager.TryCreatePool(System.String,System.Type)">
            <summary>
            尝试创建对象池
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EasyFramework.ToolKit.ObjectPoolManager.TryGetPool(System.String,System.Type)">
            <summary>
            尝试获取指定名称和类型的对象池
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EasyFramework.ToolKit.ObjectPoolManager.CreateObjectPool(System.String,System.Type)">
            <summary>
            创建新的对象池实例
            </summary>
            <param name="poolName">对象池名称</param>
            <param name="objectType">对象池中存储的对象类型</param>
            <returns></returns>
        </member>
        <member name="T:EasyFramework.ToolKit.IPoolCallbackReceiver">
            <summary>
            对象池事件的回调接口。
            
            <para>若该接口由普通类实现，则在对象被取出/回收时会直接调用该实例的方法。</para>
            <para>若由 Unity 组件实现，则在对象池操作时，会调用该 GameObject 上所有实现该接口的组件。</para>
            <para>该接口为可选实现，仅在需要监听池事件时实现。</para>
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.IPoolCallbackReceiver.OnRent(EasyFramework.ToolKit.IObjectPool)">
            <summary>
            对象从对象池中被取出时调用。
            </summary>
            <param name="owningPool">所属的对象池</param>
        </member>
        <member name="M:EasyFramework.ToolKit.IPoolCallbackReceiver.OnRelease(EasyFramework.ToolKit.IObjectPool)">
            <summary>
            对象被回收到对象池中时调用。
            </summary>
            <param name="owningPool">所属的对象池</param>
        </member>
        <member name="T:EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor">
            <summary>
            <para>提供对池化游戏对象的生命周期属性（激活/空闲时长、当前计时器）的访问接口。</para>
            <para>主要用于内部机制获取或设置如下属性：</para>
            <para>- 激活状态下的最大存活时间（超时将回收）</para>
            <para>- 空闲状态下的最大存活时间（超时将销毁）</para>
            <para>- 当前计时器（根据状态不同表示距离回收或销毁的时间）</para>
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor.ActiveLifetime">
            <summary>
            激活中对象的回收时间，小于0则无限制
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor.IdleLifetime">
            <summary>
            空闲中对象的销毁时间，小于0则无限制
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor.ElapsedTime">
            <summary>
            <para>获取当前计时器累计时间（单位：秒）。</para>
            <para>- 激活状态时：表示已激活时长</para>
            <para>- 空闲状态时：表示已空闲时长</para>
            </summary>
        </member>
        <member name="T:EasyFramework.ToolKit.IPooledUnityObjectLifetimeAccessorExtension">
            <summary>
            为 <see cref="T:EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor"/> 提供链式调用的扩展方法。
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.IPooledUnityObjectLifetimeAccessorExtension.SetActiveLifetime(EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor,System.Single)">
            <summary>
            设置激活状态下的最大存活时间。
            </summary>
            <param name="accessor">生命周期访问器。</param>
            <param name="lifetime">存活时间（秒），小于0表示无限制。</param>
            <returns>配置后的访问器实例，支持链式调用。</returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IPooledUnityObjectLifetimeAccessorExtension.SetIdleLifetime(EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor,System.Single)">
            <summary>
            设置空闲状态下的最大存活时间。
            </summary>
            <param name="accessor">生命周期访问器。</param>
            <param name="lifetime">存活时间（秒），小于0表示无限制。</param>
            <returns>配置后的访问器实例，支持链式调用。</returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IPooledUnityObjectLifetimeAccessorExtension.SetElapsedTime(EasyFramework.ToolKit.IPooledGameObjectLifetimeAccessor,System.Single)">
            <summary>
            设置当前计时器累计时间。
            </summary>
            <param name="accessor">生命周期访问器。</param>
            <param name="elapsedTime">累计时间（秒）。</param>
            <returns>配置后的访问器实例，支持链式调用。</returns>
        </member>
        <member name="T:EasyFramework.ToolKit.PooledUnityObjectAutoActivator">
            <summary>
            用于自动处理 Unity 对象在对象池中的激活/隐藏逻辑的组件。
            当对象从池中取出时自动激活 GameObject，回收时自动隐藏，并更新当前状态。
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.PooledGameObject.Target">
            <summary>
            目标实例
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.PooledGameObject.OwningPool">
            <summary>
            所属池
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.PooledGameObject.TargetComponent">
            <summary>
            目标组件（用于快速返回）
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.PooledGameObject.ActiveLifetime">
            <summary>
            激活中对象的回收时间，小于0则无限制
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.PooledGameObject.IdleLifetime">
            <summary>
            空闲中对象的销毁时间，小于0则无限制
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.PooledGameObject.ElapsedTime">
            <summary>
            <para>获取当前计时器累计时间（单位：秒）。</para>
            <para>- 激活状态时：表示已激活时长</para>
            <para>- 空闲状态时：表示已空闲时长</para>
            </summary>
        </member>
        <member name="T:EasyFramework.ToolKit.GameObjectPool">
            <summary>
            游戏对象池实现，用于管理游戏对象的对象池
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.GameObjectPool.Original">
            <summary>
            对象池中对象的原始预制体
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.GameObjectPool.Transform">
            <inheritdoc />
        </member>
        <member name="P:EasyFramework.ToolKit.GameObjectPool.TickInterval">
            <summary>
            更新间隔
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.GameObjectPool.DefaultComponentType">
            <summary>
            <para>为对象池中对象默认添加的组件类型。</para>
            <para>如果为null代表不添加默认组件。</para>
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.GameObjectPool.OnTick(System.Single)">
            <summary>
            定时更新所有活跃对象的状态
            </summary>
            <param name="interval">更新间隔（秒）</param>
        </member>
        <member name="T:EasyFramework.ToolKit.IGameObjectPool">
            <summary>
            游戏对象池接口，将GameObject实例池化，并通过缓存Component引用，提供快速访问组件的接口
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IGameObjectPool.Original">
            <summary>
            对象池中对象的原始预制体（用于实例化复制）
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IGameObjectPool.Transform">
            <summary>
            对象池的Transform组件，用于管理池中对象的层级关系
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.IGameObjectPool.GetLifetimeAccessor(UnityEngine.GameObject)">
            <summary>
            获取指定对象的生命周期访问器（包含激活时长、空闲时长与计时器控制）
            </summary>
            <param name="instance">池中 Unity 实例对象</param>
            <returns>生命周期访问器接口</returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IGameObjectPool.Update(System.Single)">
            <summary>
            更新对象池状态，处理对象生命周期和回收
            </summary>
            <param name="deltaTime">距离上次更新的时间间隔（秒）</param>
        </member>
        <member name="T:EasyFramework.ToolKit.IObjectPool">
            <summary>
            对象池接口，定义了对象池的基本操作和属性
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IObjectPool.Name">
            <summary>
            对象池的名称
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IObjectPool.ObjectType">
            <summary>
            对象池中存储的对象类型
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.IObjectPool.Capacity">
            <summary>
            对象池的容量上限
            </summary>
        </member>
        <member name="T:EasyFramework.ToolKit.IObjectPoolExtension">
            <summary>
            对象池扩展方法类，提供了一系列便捷的对象池操作方法
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolExtension.OnRent``1(``0,System.Action{System.Object})">
            <summary>
            添加对象生成时的回调函数
            </summary>
            <typeparam name="TObjectPool">对象池类型</typeparam>
            <param name="objectPool">目标对象池</param>
            <param name="callback">对象生成时的回调函数</param>
            <returns>对象池实例，支持链式调用</returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolExtension.OnRelease``1(``0,System.Action{System.Object})">
            <summary>
            添加对象回收时的回调函数
            </summary>
            <typeparam name="TObjectPool">对象池类型</typeparam>
            <param name="objectPool">目标对象池</param>
            <param name="callback">对象回收时的回调函数</param>
            <returns>对象池实例，支持链式调用</returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolExtension.SetCapacity``1(``0,System.Int32)">
            <summary>
            设置对象池的容量
            </summary>
            <typeparam name="TObjectPool">对象池类型</typeparam>
            <param name="objectPool">目标对象池</param>
            <param name="newCapacity">新的容量值</param>
            <returns>对象池实例，支持链式调用</returns>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolExtension.TryRent``1(EasyFramework.ToolKit.IObjectPool)">
            <summary>
            尝试从对象池中获取指定类型的对象
            </summary>
            <typeparam name="T">期望的对象类型</typeparam>
            <param name="objectPool">目标对象池</param>
            <returns>获取到的对象</returns>
            <exception cref="T:System.ArgumentException">当期望的类型与对象池中的对象类型不兼容时抛出</exception>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolExtension.Release(EasyFramework.ToolKit.IObjectPool,System.Object)">
            <summary>
            从对象池中释放一个实例。如果释放失败，则抛出异常。
            </summary>
            <param name="objectPool">目标对象池</param>
            <param name="instance">需要被释放的实例</param>
            <exception cref="T:System.InvalidOperationException">当释放失败时抛出</exception>
        </member>
        <member name="M:EasyFramework.ToolKit.IObjectPoolExtension.Remove(EasyFramework.ToolKit.IObjectPool,System.Object)">
            <summary>
            从对象池中移除一个实例。如果移除失败，则抛出异常。
            </summary>
            <param name="objectPool">目标对象池</param>
            <param name="instance">需要被移除的实例</param>
            <exception cref="T:System.InvalidOperationException">当移除失败时抛出</exception>
        </member>
        <member name="T:EasyFramework.ToolKit.ObjectPool">
            <summary>
            通用对象池实现，用于管理实现了IPooledObject接口的对象
            </summary>
        </member>
        <member name="T:EasyFramework.ToolKit.ObjectPoolBase">
            <summary>
            对象池的基类，实现了IObjectPool接口的基本功能
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.ObjectPoolBase.EasyFramework#ToolKit#IObjectPool#Name">
            <inheritdoc />
        </member>
        <member name="P:EasyFramework.ToolKit.ObjectPoolBase.EasyFramework#ToolKit#IObjectPool#ObjectType">
            <inheritdoc />
        </member>
        <member name="P:EasyFramework.ToolKit.ObjectPoolBase.Name">
            <summary>
            对象池的名称
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.ObjectPoolBase.ObjectType">
            <summary>
            对象池中存储的对象类型
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.ObjectPoolBase.Capacity">
            <summary>
            <para>对象池的容量上限。设置小于0表示无限制</para>
            <para>当设置新的容量时，如果新容量小于当前活跃对象数量，将抛出异常。</para>
            </summary>
        </member>
        <member name="M:EasyFramework.ToolKit.ObjectPoolBase.ShrinkIdleObjectsToFitCapacity(System.Int32)">
            <summary>
            根据容量限制收缩
            </summary>
        </member>
        <member name="P:EasyFramework.ToolKit.MethodPickerSettingsAttribute.LimitParameterTypesGetter">
            <summary>
            <para>获取参数的限制类型</para>
            <para>匹配时会先判断返回的Type数组长度是否与参数数量相同，然后逐个参数匹配是否符合，如果有Type为null代表不限制该参数的类型。</para>
            </summary>
        </member>
    </members>
</doc>
