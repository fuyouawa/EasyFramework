using EasyFramework.Core;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Sirenix.OdinInspector;
using UnityEngine;

namespace EasyFramework.ToolKit.Editor
{
    public static class CodeBuild
    {
        private static readonly string CsTemplate = @"
{{ Header }}
{{ Body }}
".TrimStart();

        private static readonly string CsNamespaceTemplate = @"
{{ Header }}
namespace {{ Namespace }}
{
{{ Body }}
}
".Trim();

        private static readonly string CsHeaderTemplate = @"
{%- for using in Usings -%}
using {{ using }};
{%- endfor -%}
".Trim();

        private static readonly string CsBodyTemplate = @"
public class {{ ClassName }} : {{ BaseClassName }}
{
{{ ClassTemplate }}


{{ BinderFields }}
}
".Trim();

        private static readonly string CsBindersFieldCodeBegin = @"
#region 绑定变量（自动生成）
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyFramework.ToolKit.Builder.
//     这些代码由EasyFramework.ToolKit.Builder生成。
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     更改可能导致未定义行为，并在下次代码生成时丢失。
// </auto-generated>
//------------------------------------------------------------------------------
".Trim();

        private static readonly string CsBindersFieldCodeEnd = @"
#endregion
".Trim();

        public static bool CanBuild(Builder builder)
        {
            var dir = Application.dataPath + "/" + builder.GenerateDirectory;
            var path = dir + "/" + builder.GetScriptName();
            return !File.Exists(path);
        }

        public static bool TryBuild(Builder builder)
        {
            if (!CanBuild(builder))
                return false;

            var settings = BuilderSettings.Instance;
            var dir = Application.dataPath + "/" + builder.GenerateDirectory;
            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }

            var path = dir + "/" + builder.GetScriptName();
            var engine = new TemplateEngine();

            var header = engine.Render(CsHeaderTemplate, new
            {
                Usings = new List<string>
                {
                    "UnityEngine",
                    builder.BaseClass.Namespace
                }.Distinct().ToArray()
            });

            var binderFields = GetBinderFieldsCode(builder);

            var template = builder.BuildScriptType switch
            {
                Builder.ScriptType.UIPanel => settings.UIPanelScriptTypeTemplate,
                Builder.ScriptType.Controller => settings.ControllerScriptTypeTemplate,
                _ => throw new ArgumentOutOfRangeException()
            };
            if (settings.AutoIndentTemplate)
            {
                template = AddIndent(template);
            }

            var body = engine.Render(CsBodyTemplate, new
            {
                ClassName = builder.GetScriptName(),
                BaseClassName = builder.BaseClass.Name,
                ClassTemplate = template,
                BinderFields = AddIndent(binderFields)
            });

            var code = CombineCode(builder, header, body);
            Debug.Log(code);

            return true;
        }

        public static string GetBinderFieldsCode(Builder builder)
        {
            return CsBindersFieldCodeBegin + "\n\n" + GetBinderFieldsDefine(builder) + "\n\n" +
                   CsBindersFieldCodeEnd;
        }

        private static string CombineCode(Builder builder, string header, string body)
        {
            string code;
            var engine = new TemplateEngine();
            if (builder.Namespace.IsNotNullOrWhiteSpace())
            {
                code = engine.Render(CsNamespaceTemplate, new
                {
                    Header = header,
                    Namespace = builder.Namespace.Trim(),
                    Body = body
                });
            }
            else
            {
                code = engine.Render(CsTemplate, new
                {
                    Header = header,
                    Body = body
                });
            }

            return code.Replace("\r\n", "\n").Replace("\n", "\r\n");
        }

        private static string AddIndent(string text)
        {
            if (text.IsNullOrWhiteSpace())
                return string.Empty;
            var indent = BuilderSettings.Instance.GetIndent();
            var splits = text.Split('\n').Select(s => indent + s);
            return string.Join("\n", splits);
        }

        private static string GetBinderFieldsDefine(Builder builder)
        {
            var binders = builder.GetOwnedBinders();

            var fields = binders.Select(b =>
            {
                var access = b.BindAccess switch
                {
                    Binder.Access.Public => "public",
                    Binder.Access.Protected => "protected",
                    Binder.Access.Private => "private",
                    _ => throw new ArgumentOutOfRangeException()
                };
                return new
                {
                    Access = access,
                    Type = b.GetBindType().Name,
                    Name = b.GetBindName(),
                    Comment = b.GetComment()
                };
            }).ToArray();

            var fieldStatements = new List<string>();
            foreach (var field in fields)
            {
                var statement = "";
                if (field.Comment.IsNotNullOrEmpty())
                {
                    statement += field.Comment + '\n';
                }

                var attributes = new List<string>
                {
                    "SerializeField",
                    typeof(BindingAttribute).Namespace + ".Binding"
                };

                switch (builder.BindersGroupType)
                {
                    case Builder.GroupType.None:
                        break;
                    case Builder.GroupType.Title:
                        attributes.Add($"{typeof(TitleGroupAttribute).Namespace}.TitleGroup(\"{builder.BindersGroupName}\")");
                        break;
                    case Builder.GroupType.Foldout:
                        attributes.Add($"{typeof(FoldoutGroupAttribute).Namespace}.FoldoutGroup(\"{builder.BindersGroupName}\")");
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                statement += $"[{string.Join(", ", attributes)}]\n{field.Access} {field.Type} {field.Name};";
                fieldStatements.Add(statement);
            }

            return string.Join("\n", fieldStatements);
        }
    }
}
